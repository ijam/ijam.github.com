<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Obj-c | 零與壹的世界]]></title>
  <link href="http://ijam.github.com/blog/categories/obj-c/atom.xml" rel="self"/>
  <link href="http://ijam.github.com/"/>
  <updated>2012-10-20T00:33:50+08:00</updated>
  <id>http://ijam.github.com/</id>
  <author>
    <name><![CDATA[ijam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Obj-c] NSSet versus NSArray]]></title>
    <link href="http://ijam.github.com/blog/2012/04/19/obj-c-nsset-versus-nsarray/"/>
    <updated>2012-04-19T23:17:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/04/19/obj-c-nsset-versus-nsarray</id>
    <content type="html"><![CDATA[<h4>NSSet：</h4>

<ul>
<li>未排序的物件集合</li>
<li>確保物件唯一性</li>
<li><p>由於使用hash table的機制，所以在取得大量的物件時效能更好</p>

<p>  Performance Information:</p>

<p>  This performance information assumes adequate implementations for the hash method defined for the objects.
  With a bad hash function, access and edits take linear time.</p>

<ul>
<li>Accessing an element of a set takes constant time.</li>
<li>Setting and removing take constant time.</li>
</ul>
</li>
</ul>


<h4>NSArray：</h4>

<ul>
<li>經排序的物件集合</li>
<li>無唯一性</li>
<li><p>在寫入或取代資料內容時，效能較好</p>

<p>  Performance Information:</p>

<ul>
<li>Accessing an element of an array takes constant time.</li>
<li>Appending to and removing elements from either end take constant time.</li>
<li>Replacing an element takes constant time.</li>
<li>Inserting an element into the middle of an array takes linear time.</li>
</ul>
</li>
</ul>


<h4>結論：</h4>

<p>搜尋大量的物件時，或是必須確保物件彼此間的唯一性時，使用NSSet;
普通的存取操作時，搜尋小量物件時，使用NSArray。</p>

<p><a href="http://goo.gl/OVCTF">資料來源</a></p>

<p><a href="http://goo.gl/XFyzo">延伸閱讀</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Obj-c] Accessor Method]]></title>
    <link href="http://ijam.github.com/blog/2012/04/11/obj-c-accessor-method/"/>
    <updated>2012-04-11T00:06:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/04/11/obj-c-accessor-method</id>
    <content type="html"><![CDATA[<p>宣告實體變數(iVar)，由於預設為protected，只能給自己或繼承者存取，若要給外部類別存取的話，則需使用accessor method來產生setter、getter。</p>

<pre><code>@interface Player: NSObject 
{
  NSString *name; //宣告實體變數(iVar)
}

@property (nonatomic, retain) NSString *name;  //宣告setter、getter

@synthesize name;  //根據property賦予的屬性(copy, retain等)實作setter、getter
</code></pre>

<p>如此ㄧ來，compiler會自動產生setter、getter：</p>

<pre><code>- (void)setName:(NSString *)theName;  //setter
- (NSString *)name;   //getter
</code></pre>

<p>objective-c 2.0後，由於Dot Syntax的關係，[self name]即等於self.name，所以setter、getter傳統寫法為：</p>

<p>//setter</p>

<pre><code>[self setName:@"ijam"];
</code></pre>

<p>//getter</p>

<pre><code>[self name];
</code></pre>

<p>加入Dot Syntax後，</p>

<p>//setter</p>

<pre><code>self.name = @"ijam";
</code></pre>

<p>//getter</p>

<pre><code>NSLog(@"My name is: %@", self.name);
</code></pre>

<p>而self.name若有assign值的話，則會自動呼叫setter，
反之，則只呼叫getter，</p>

<p>利用iVar assign值也不會呼叫setter，而是直接賦予iVar值。</p>

<p>另外，也有看過在iVar前/後加上underscore的，然後再利用@synthesize property = iVar來自定accessor method name，這樣作法似乎是為了避免造成iVar與property的混淆，提高程式可讀性。</p>

<p>stackoverflow也有相關討論串，可參考<a href="http://goo.gl/M1dNd">這邊</a>。</p>

<p>至於使用property時機？可參考<a href="http://goo.gl/p0fam">這邊</a>。</p>
]]></content>
  </entry>
  
</feed>
