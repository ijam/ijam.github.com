<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[零與壹的世界]]></title>
  <link href="http://ijam.github.com/atom.xml" rel="self"/>
  <link href="http://ijam.github.com/"/>
  <updated>2012-10-20T00:26:27+08:00</updated>
  <id>http://ijam.github.com/</id>
  <author>
    <name><![CDATA[ijam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[iOS] 區別ios版本]]></title>
    <link href="http://ijam.github.com/blog/2012/10/15/ios-qu-bie-iosban-ben/"/>
    <updated>2012-10-15T22:36:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/10/15/ios-qu-bie-iosban-ben</id>
    <content type="html"><![CDATA[<p>想在新版iOS SDK上使用新的功能又不能影響到原有的iOS舊版本程式架構，
常常需要針對不同的iOS版本做對應的處理。</p>

<ul>
<li><p>compile-time conditional : 在compile時，compiler會根據不同的設定值來確保其順利找到對應的code。</p>

<ul>
<li><p>__IPHONE_OS_VERSION_MAX_ALLOWED : 根據Base SDK的設定。</p></li>
<li><p>__IPHONE_OS_VERSION_MIN_REQUIRED :根據iPhone OS Deployment Target的設定。</p></li>
</ul>
</li>
<li><p>run-time check :</p>

<ul>
<li><p>可以利用 [[UIDevice currentDevice] systemVersion] 判斷使用者的iOS版本。</p></li>
<li><p>或是使用 - (BOOL)respondsToSelector:(SEL)aSelector 測試是否擁有可用的method或property，並可用 - (id)performSelector:(SEL)aSelector 避免compile時，因為某些被deprecated的method/property而產生error。</p></li>
</ul>
</li>
</ul>


<h5>in project settings :</h5>

<ul>
<li>Base SDK : 你想要使用的功能，其iOS最高版本。(通常是設為最新的)</li>
<li>iPhone OS Deployment Target : 還支援的iOS最低版本。</li>
</ul>


<h5>各iOS版本的對應 :</h5>

<pre><code>#define __IPHONE_2_0     20000
#define __IPHONE_2_1     20100
#define __IPHONE_2_2     20200
#define __IPHONE_3_0     30000
#define __IPHONE_3_1     30100
#define __IPHONE_3_2     30200
#define __IPHONE_4_0     40000
#define __IPHONE_4_1     40100
#define __IPHONE_4_2     40200
#define __IPHONE_4_3     40300
#define __IPHONE_5_0     50000
#define __IPHONE_5_1     50100
#define __IPHONE_6_0     60000
#define __IPHONE_NA      99999  /* not available */
</code></pre>

<h5>example :</h5>

<pre><code>#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 60000

  if (6.0 &lt;= [[[UIDevice currentDevice] systemVersion] floatValue]) {
    // iOS 6.0 後的新功能
  } else {
    // iOS 6.0 前的功能
  }

#else

  /* 
   * 假設older method是iOS 5.0中被deprecated的功能，
   * newer method是取代older的新功能，
   * 而compile環境是iOS 5.0，如果直接呼叫older的話，
   * build時就會出現warning，所以必須先測試older method是否可用，
   * 再使用performSelector呼叫，避免warning
   */

  if ([self respondsToSelector:@selector(newer:)]) {

    //代表使用者使用的是iOS 5.0以上，可以使用newer功能

    NSString *theNewMessage = [self performSelector:@selector(newer:) withObject:@"i'm newer"];

  } else {

    //代表newer不能用，則使用older

    NSString *theOldMessage = [self performSelector:@selector(older:) withObject:@"i'm older"];
  }

#endif
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[fixed] CorePlot failed to build in XCode4.4]]></title>
    <link href="http://ijam.github.com/blog/2012/08/06/fixed-coreplot-failed-to-build-in-xcode4-dot-4/"/>
    <updated>2012-08-06T21:47:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/08/06/fixed-coreplot-failed-to-build-in-xcode4-dot-4</id>
    <content type="html"><![CDATA[<p>升級Xcode4.4後，原本有使用CorePlot的projects，build後竟產生這樣的error</p>

<pre><code>clang: error: -Z-reserved-lib-stdc++: 'linker' input unused when '-c' is present

Command /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang failed with exit code 1
</code></pre>

<p>原來是因為Xcode4.4將compiler升級到了LLVM 4.0</p>

<h4>解決辦法：</h4>

<ul>
<li><p><a href="http://goo.gl/LeMny">安裝新的CorePlot吧QQ</a></p></li>
<li><p>把compiler換成LLVM GCC</p></li>
</ul>


<p><a href="http://goo.gl/xGmdj">參考資料1</a></p>

<p><a href="http://goo.gl/D5fo1">參考資料2</a></p>

<p><a href="http://goo.gl/xlulp">stackoverflow討論</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Obj-c] NSSet versus NSArray]]></title>
    <link href="http://ijam.github.com/blog/2012/04/19/obj-c-nsset-versus-nsarray/"/>
    <updated>2012-04-19T23:17:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/04/19/obj-c-nsset-versus-nsarray</id>
    <content type="html"><![CDATA[<h4>NSSet：</h4>

<ul>
<li>未排序的物件集合</li>
<li>確保物件唯一性</li>
<li><p>由於使用hash table的機制，所以在取得大量的物件時效能更好</p>

<p>  Performance Information:</p>

<p>  This performance information assumes adequate implementations for the hash method defined for the objects.
  With a bad hash function, access and edits take linear time.</p>

<ul>
<li>Accessing an element of a set takes constant time.</li>
<li>Setting and removing take constant time.</li>
</ul>
</li>
</ul>


<h4>NSArray：</h4>

<ul>
<li>經排序的物件集合</li>
<li>無唯一性</li>
<li><p>在寫入或取代資料內容時，效能較好</p>

<p>  Performance Information:</p>

<ul>
<li>Accessing an element of an array takes constant time.</li>
<li>Appending to and removing elements from either end take constant time.</li>
<li>Replacing an element takes constant time.</li>
<li>Inserting an element into the middle of an array takes linear time.</li>
</ul>
</li>
</ul>


<h4>結論：</h4>

<p>搜尋大量的物件時，或是必須確保物件彼此間的唯一性時，使用NSSet;
普通的存取操作時，搜尋小量物件時，使用NSArray。</p>

<p><a href="http://goo.gl/OVCTF">資料來源</a></p>

<p><a href="http://goo.gl/XFyzo">延伸閱讀</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Obj-c] Accessor Method]]></title>
    <link href="http://ijam.github.com/blog/2012/04/11/obj-c-accessor-method/"/>
    <updated>2012-04-11T00:06:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/04/11/obj-c-accessor-method</id>
    <content type="html"><![CDATA[<p>宣告實體變數(iVar)，由於預設為protected，只能給自己或繼承者存取，若要給外部類別存取的話，則需使用accessor method來產生setter、getter。</p>

<pre><code>@interface Player: NSObject 
{
  NSString *name; //宣告實體變數(iVar)
}

@property (nonatomic, retain) NSString *name;  //宣告setter、getter

@synthesize name;  //根據property賦予的屬性(copy, retain等)實作setter、getter
</code></pre>

<p>如此ㄧ來，compiler會自動產生setter、getter：</p>

<pre><code>- (void)setName:(NSString *)theName;  //setter
- (NSString *)name;   //getter
</code></pre>

<p>objective-c 2.0後，由於Dot Syntax的關係，[self name]即等於self.name，所以setter、getter傳統寫法為：</p>

<p>//setter</p>

<pre><code>[self setName:@"ijam"];
</code></pre>

<p>//getter</p>

<pre><code>[self name];
</code></pre>

<p>加入Dot Syntax後，</p>

<p>//setter</p>

<pre><code>self.name = @"ijam";
</code></pre>

<p>//getter</p>

<pre><code>NSLog(@"My name is: %@", self.name);
</code></pre>

<p>而self.name若有assign值的話，則會自動呼叫setter，
反之，則只呼叫getter，</p>

<p>利用iVar assign值也不會呼叫setter，而是直接賦予iVar值。</p>

<p>另外，也有看過在iVar前/後加上underscore的，然後再利用@synthesize property = iVar來自定accessor method name，這樣作法似乎是為了避免造成iVar與property的混淆，提高程式可讀性。</p>

<p>stackoverflow也有相關討論串，可參考<a href="http://goo.gl/M1dNd">這邊</a>。</p>

<p>至於使用property時機？可參考<a href="http://goo.gl/p0fam">這邊</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS] 接收推播的三種狀態]]></title>
    <link href="http://ijam.github.com/blog/2012/04/04/ios-jie-shou-tui-bo-de-san-zhong-zhuang-tai/"/>
    <updated>2012-04-04T16:43:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/04/04/ios-jie-shou-tui-bo-de-san-zhong-zhuang-tai</id>
    <content type="html"><![CDATA[<p>完成推播註冊後，由server發送payload經由APNs到你的APP時，</p>

<p>主要會有三種狀態來處理你的推播資訊：</p>

<h4>APP正常運行或背景執行時：</h4>

<p>主要都是利用這個method做處理，只是需要經過ㄧ些判斷。</p>

<p>如：</p>

<pre><code>- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
  if (nil == userInfo) {
    return;
  }

  NSDictionary *notification = userInfo;

  if (isBackground_) {
    //由背景執行開啟
  } else {
    //正常情況
  }
}
</code></pre>

<h4>APP關閉時：</h4>

<p>此時APP是未開啓狀態，如果先前已有對此APP開啟推播通知，那麼藉由推播通知開啟APP時，就會觸發以下method，你可以利用launchOptions來處理你的推播資訊。</p>

<p>如：</p>

<pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  if (nil != launchOptions) {
    NSDictionary *notification = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];
    ...
  }
}
</code></pre>

<p>以上都是需要經由推播通知進入App，如果不理通知再自行進入App則不會發生以上情況。</p>

<p>done..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS] Apple Push Notification service(APNs)]]></title>
    <link href="http://ijam.github.com/blog/2012/04/01/ios-apple-push-notification-service-apns/"/>
    <updated>2012-04-01T01:50:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/04/01/ios-apple-push-notification-service-apns</id>
    <content type="html"><![CDATA[<p>推播服務在APP中是經常會使用到的功能，利用推播可以很容易的通知你的APP使用者某些訊息，如：APP有更新啥新玩意兒，由於可以自定sound或badge等的出現，可以增加曝光度、吸引使用者目光，在使用者ㄧ時手癢情況下，或許可以多增加些廣告收益(誤)。</p>

<p>好了，首先要先跟APNS註冊推播服務</p>

<pre><code>[[UIApplication sharedApplication] registerForRemoteNotificationTypes:
UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert];
</code></pre>

<p>這段主要是要與APNS說你想使用推播，你可以自行選擇notification的types。</p>

<p>完成後，必須傳送device token等的相關資訊給你的provider(server)。token是必要的，因為APNs會利用token跟device做溝通，當然，你也可以傳送些額外的資訊。</p>

<pre><code>- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
  ...
}
</code></pre>

<p>傳送過程中若有發生錯誤，會反應在底下這個method。</p>

<pre><code>- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
  NSLog(@"The error is: %@", error);
}
</code></pre>

<h5>原因可能多半是</h5>

<ul>
<li>網路不通 or 在simulator執行</li>
<li>AppID有問題</li>
<li>Sandbox or Production環境不對</li>
</ul>


<p>檢查下吧，再不行就dump出來看吧:p</p>

<p>基本上，這樣就可以接收來自server的推播了，local端若想玩玩的話，可以試試<a href="https://github.com/stefanhafeneger/PushMeBaby">PushMeBaby</a>這套application。</p>

<p>參考來源：<a href="http://goo.gl/aQpwo">官方</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[fixed] Could not find rake-0.9.2 in any of the sources Run 'bundle install' to install]]></title>
    <link href="http://ijam.github.com/blog/2012/03/12/solved-could-not-find-rake-0-dot-9-2-in-any-of-the-sources-run-bundle-install-to-install/"/>
    <updated>2012-03-12T23:00:00+08:00</updated>
    <id>http://ijam.github.com/blog/2012/03/12/solved-could-not-find-rake-0-dot-9-2-in-any-of-the-sources-run-bundle-install-to-install</id>
    <content type="html"><![CDATA[<p>When you key in &#8216;rake install&#8217;, then get this error:</p>

<pre><code>rake aborted!
You have already activated rake 0.9.2.2, but your Gemfile requires rake 0.9.2. Using bundle exec may solve this.
</code></pre>

<p>The Solution:</p>

<pre><code>add gem 'rake', '0.9.2.2' in the Gemfile Document.
</code></pre>
]]></content>
  </entry>
  
</feed>
